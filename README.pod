=pod

=encoding utf8

=head1 NAME

Mojolicious::Plugin::TextHelpers - Methods to format, count, sanitize, etc...

=head1 SYNOPSIS

  # Mojolicious
  $self->plugin('TextHelpers', %defaults);

  # Mojolicious::Lite
  plugin 'TextHelpers', %defaults;

  $self->count(10, 'user');     # 10 users
  $self->count([User->new]);    # 1 user
  $self->paragraphs($text);     # <p>line 1</p><p>line 2</p>...
  $self->maxwords('a, b, c', 2) # a, b...
  $self->sanitize($html);       # remove all HTML

  # keep <a> and <p> tags
  $self->sanitize($html, tags => ['a','p']);

  # future calls to param($name[n]) return trimmed values
  $self->trim_param(@names);

=head1 METHODS

Defaults can be set for certain methods when the plugin is loaded.

   $self->plugin('TextHelpers', maxwords => { omit => ' [snip]' },
				sanitize => { tags => ['code', 'pre', 'a'] });

See the method's docs for more info.

=head2 count

    $self->count(10, 'user');           # 10 users
    $self->count([User->new]);          # 1 user
    $self->count([User->new], 'Luser'); # 1 Luser

Use the singular or plural form of the word based on the number given by the first argument.
If a non-empty array of objects are given the lowercase form of the package's basename is used.

=head2 maxwords

   $self->maxwords($str, $n);
   $self->maxwords($str, $n, '&hellip;');

Truncate C<$str> after C<$n> words. If C<$str> has more than C<$n> words traling
punctuation characters are stripped from the C<$n>th word and C<'...'> is appended.
An alternate ommision character can be given as the third option.

=head3 Defaults

   $self->plugin('TextHelpers', maxwords => { omit => ' [snip]', max => 20 });

=head2 paragraphs

    $self->paragraphs($text);

Wrap lines seperated by empty C<\r\n> or C<\n> lines in HTML paragraph tags (C<p>).
For example: C<A\r\n\r\nB\r\n> would be turned into C<< <p>A\r\n</p><p>B\r\n</p> >>.

The returned HTML is assumed to be safe, it's wrapped in a L<Mojo::ByteStream>.

=head2 sanitize

    $self->sanitize($html);
    $self->sanitize($html, tags => ['a','p'], attr => ['href']);

Remove all HTML tags in the string given by C<$html>. If C<tags> and -optionally- C<attr>
are given, remove everything but those tags and attributes.

=head3 Defaults

   $self->plugin('TextHelpers', sanitize => { tags => ['a','p'], attr => ['href'] });

=head2 trim_param

    $self->trim_param(@names);

For each param name in C<@names>, make future call to L<Mojolicious::Controller/param>
return the params' values without leading and trailing whitespace. In some cases it may be
best to add this to your routes via L<Mojolicious::Routes/under>:

  my $account = $self->routes->under(sub {
    shift->trim_param('name', 'email', 'phone');
    return 1;
  });

  $account->post('save')->to('account#save');
  $account->post('update')->to('account#update');

=head1 SEE ALSO

L<Lingua::EN::Inflect>, L<Number::Format>,

=head1 AUTHOR

Skye Shaw (skye.shaw [AT] gmail.com)

=head1 LICENSE

Copyright (c) 2012-2014 Skye Shaw. This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.


=cut

